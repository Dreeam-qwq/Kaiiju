From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kugge <sofiane.djerbi38@gmail.com>
Date: Mon, 13 Feb 2023 00:53:40 +0100
Subject: [PATCH] Kaiiju Lobotomize Villager


diff --git a/src/main/java/dev/kaiijumc/kaiiju/KaiijuWorldConfig.java b/src/main/java/dev/kaiijumc/kaiiju/KaiijuWorldConfig.java
index b99b438b92587f23c77c5321d5d23e76dc5450de..104f19cced8fb3b692e3a4772360d9eba3bdd6f2 100644
--- a/src/main/java/dev/kaiijumc/kaiiju/KaiijuWorldConfig.java
+++ b/src/main/java/dev/kaiijumc/kaiiju/KaiijuWorldConfig.java
@@ -149,6 +149,13 @@ public class KaiijuWorldConfig {
     public boolean lobotomizeAnimalCheckCanJump = true;
     public boolean lobotomizeAnimalLookAtPlayer = false;
     public boolean lobotomizeAnimalFloat = true;
+    public boolean lobotomizeVillagerEnabled = false;
+    public int lobotomizeVillagerCheckInterval = 100;
+    public boolean lobotomizeVillagerDoRaids = true;
+    public boolean lobotomizeVillagerCheckCanJump = true;
+    public boolean lobotomizeVillagerCheckOnBed = true;
+    public boolean lobotomizeVillagerCheckJobSite = true;
+    public boolean lobotomizeVillagerCheckBedNearby = true;
 
     private void lobotomizeSettings() {
         lobotomizeAnimalEnabled = getBoolean("lobotomize.animal.enabled", lobotomizeAnimalEnabled);
@@ -156,5 +163,12 @@ public class KaiijuWorldConfig {
         lobotomizeAnimalCheckCanJump = getBoolean("lobotomize.animal.check-can-jump", lobotomizeAnimalCheckCanJump);
         lobotomizeAnimalLookAtPlayer = getBoolean("lobotomize.animal.look-at-player", lobotomizeAnimalLookAtPlayer);
         lobotomizeAnimalFloat = getBoolean("lobotomize.animal.float", lobotomizeAnimalFloat);
+        lobotomizeVillagerEnabled = getBoolean("lobotomize.villager.enabled", lobotomizeVillagerEnabled);
+        lobotomizeVillagerDoRaids = getBoolean("lobotomize.villager.do-raids", lobotomizeVillagerDoRaids);
+        lobotomizeVillagerCheckInterval = getInt("lobotomize.villager.check-interval", lobotomizeVillagerCheckInterval);
+        lobotomizeVillagerCheckCanJump = getBoolean("lobotomize.villager.check-can-jump", lobotomizeVillagerCheckCanJump);
+        lobotomizeVillagerCheckOnBed = getBoolean("lobotomize.villager.check-on-bed", lobotomizeVillagerCheckOnBed);
+        lobotomizeVillagerCheckJobSite = getBoolean("lobotomize.villager.check-job-site", lobotomizeVillagerCheckJobSite);
+        lobotomizeVillagerCheckBedNearby = getBoolean("lobotomize.villager.check-bed-nearby", lobotomizeVillagerCheckBedNearby);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index aed1d9ccffe471b6c2a1d52d2d3d097f6431318b..f1a66bda9949eff5f8e420d28d23f47aec3d4587 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -200,14 +200,14 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
 
     private boolean checkLobotomized() {
-        int interval = this.level.purpurConfig.villagerLobotomizeCheckInterval;
+        int interval = this.level.kaiijuConfig.lobotomizeVillagerCheckInterval; // Kaiiju
         if (this.notLobotomizedCount > 3) {
             // check half as often if not lobotomized for the last 3+ consecutive checks
             interval *= 2;
         }
-        if (this.level.getGameTime() % interval == 0) {
+        if ((this.getId() + this.tickCount) % interval == 0) { // Kaiiju - Avoid check lags
             // offset Y for short blocks like dirt_path/farmland
-            this.isLobotomized = !canTravelFrom(new BlockPos(getX(), getY() + 0.0625D, getZ()));
+            this.isLobotomized = needLobotomy(); // Kaiiju - Override
 
             if (this.isLobotomized) {
                 this.notLobotomizedCount = 0;
@@ -219,9 +219,80 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
 
     private boolean canTravelFrom(BlockPos pos) {
-        return canTravelTo(pos.east()) || canTravelTo(pos.west()) || canTravelTo(pos.north()) || canTravelTo(pos.south());
+        return canInteractAt(pos.east()) || canInteractAt(pos.west()) || canInteractAt(pos.north()) || canInteractAt(pos.south()); // Kaiiju
     }
 
+    // Kaiiju start - Customize canTravelTo checks
+    private boolean needLobotomy() {
+        if (this.isSleeping()) return false;
+        if (this.level.kaiijuConfig.lobotomizeVillagerCheckOnBed && isOnBed()) return false;
+        return !canTravelFrom(new BlockPos(getX(), getY() + 0.5D, getZ()));
+    }
+
+    private boolean canInteractAt(BlockPos pos) {
+        net.minecraft.world.level.block.state.BlockState top = null;
+        // Check if mob can jump over block
+        if (this.level.kaiijuConfig.lobotomizeVillagerCheckCanJump && this.canJump()) {
+            top = this.level.getBlockStateIfLoaded(pos.above());
+            if (top == null) return false;
+            if (top.isPathfindable(level, pos, net.minecraft.world.level.pathfinder.PathComputationType.LAND)) {
+                net.minecraft.world.level.block.state.BlockState above = this.level.getBlockState(pos.above(2));
+                if (above.isPathfindable(level, pos, net.minecraft.world.level.pathfinder.PathComputationType.LAND)) return true;
+            }
+        }
+        // Otherwise, check if mob can interact with bottom block
+        net.minecraft.world.level.block.state.BlockState bottom = this.level.getBlockStateIfLoaded(pos);
+        if (bottom == null) return false;
+        net.minecraft.world.level.block.Block bottomBlock = bottom.getBlock();
+        if (isTallBlock(bottomBlock)) return false;
+        if (this.level.kaiijuConfig.lobotomizeVillagerCheckBedNearby && isBed(bottomBlock)) return true;
+        if (this.level.kaiijuConfig.lobotomizeVillagerCheckJobSite && isInteractiveJobSite(bottomBlock, this.getVillagerData().getProfession())) return true;
+        // If he can't interact, check if he can travel
+        if (!bottom.isPathfindable(level, pos, net.minecraft.world.level.pathfinder.PathComputationType.LAND)) return false;
+        if (top == null) top = this.level.getBlockState(pos.above());
+        return top.isPathfindable(level, pos, net.minecraft.world.level.pathfinder.PathComputationType.LAND);
+    }
+
+    private boolean canJump() {
+        BlockPos pos = new BlockPos(getX(), getY() + 2.5D, getZ());
+        net.minecraft.world.level.block.Block above = this.level.getBlockIfLoaded(pos);
+        return !above.hasCollision;
+    }
+
+    private boolean isOnBed() {
+        BlockPos pos = new BlockPos(getX(), getY() - 0.5D, getZ());
+        net.minecraft.world.level.block.Block below = this.level.getBlockIfLoaded(pos);
+        return isBed(below);
+    }
+
+    private static  boolean isBed(net.minecraft.world.level.block.Block block) {
+        return block instanceof net.minecraft.world.level.block.BedBlock;
+    }
+
+    private boolean isInteractiveJobSite(net.minecraft.world.level.block.Block block, VillagerProfession profession) {
+        if (this.lastTradedPlayer == null) return false;
+        return (block instanceof net.minecraft.world.level.block.BlastFurnaceBlock && profession != VillagerProfession.ARMORER) ||
+               (block instanceof net.minecraft.world.level.block.SmokerBlock && profession != VillagerProfession.BUTCHER) ||
+               (block instanceof net.minecraft.world.level.block.CartographyTableBlock && profession != VillagerProfession.CARTOGRAPHER) ||
+               (block instanceof net.minecraft.world.level.block.BrewingStandBlock && profession != VillagerProfession.CLERIC) ||
+               (block instanceof net.minecraft.world.level.block.ComposterBlock && profession != VillagerProfession.FARMER) ||
+               (block instanceof net.minecraft.world.level.block.BarrelBlock && profession != VillagerProfession.FISHERMAN) ||
+               (block instanceof net.minecraft.world.level.block.FletchingTableBlock && profession != VillagerProfession.FLETCHER) ||
+               (block instanceof net.minecraft.world.level.block.CauldronBlock && profession != VillagerProfession.LEATHERWORKER) ||
+               (block instanceof net.minecraft.world.level.block.LecternBlock && profession != VillagerProfession.LIBRARIAN) ||
+               (block instanceof net.minecraft.world.level.block.StonecutterBlock && profession != VillagerProfession.MASON) ||
+               (block instanceof net.minecraft.world.level.block.LoomBlock && profession != VillagerProfession.SHEPHERD) ||
+               (block instanceof net.minecraft.world.level.block.SmithingTableBlock && profession != VillagerProfession.TOOLSMITH) ||
+               (block instanceof net.minecraft.world.level.block.GrindstoneBlock && profession != VillagerProfession.WEAPONSMITH);
+    }
+
+    private static boolean isTallBlock(net.minecraft.world.level.block.Block block) {
+        return block instanceof net.minecraft.world.level.block.FenceBlock ||
+               block instanceof net.minecraft.world.level.block.FenceGateBlock ||
+               block instanceof net.minecraft.world.level.block.WallBlock;
+    }
+    // Kaiiju end
+
     private boolean canTravelTo(BlockPos pos) {
         net.minecraft.world.level.block.state.BlockState state = this.level.getBlockStateIfLoaded(pos);
         if (state == null) {
@@ -337,7 +408,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     protected void mobTick(boolean inactive) {
         //this.level.getProfiler().push("villagerBrain"); // Purpur
         // Purpur start
-        if (this.level.purpurConfig.villagerLobotomizeEnabled) {
+        if (this.level.kaiijuConfig.lobotomizeVillagerEnabled) { // Kaiiju - Override
             // treat as inactive if lobotomized
             inactive = inactive || checkLobotomized();
         } else {
@@ -380,7 +451,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
             this.lastTradedPlayer = null;
         }
 
-        if (!inactive && !this.isNoAi() && this.random.nextInt(100) == 0) { // Paper
+        if ((!inactive || (this.level.kaiijuConfig.lobotomizeVillagerDoRaids && this.isLobotomized)) && !this.isNoAi() && this.random.nextInt(100) == 0) { // Paper // Kaiiju
             Raid raid = ((ServerLevel) this.level).getRaidAt(this.blockPosition());
 
             if (raid != null && raid.isActive() && !raid.isOver()) {
@@ -647,6 +718,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         if (this.assignProfessionWhenSpawned) {
             nbt.putBoolean("AssignProfessionWhenSpawned", true);
         }
+        nbt.putBoolean("Kaiiju.Lobotomized", this.isLobotomized()); // Kaiiju
 
     }
 
@@ -687,6 +759,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         if (nbt.contains("AssignProfessionWhenSpawned")) {
             this.assignProfessionWhenSpawned = nbt.getBoolean("AssignProfessionWhenSpawned");
         }
+        this.isLobotomized = nbt.getBoolean("Kaiiju.Lobotomized"); // Kaiiju
 
     }
 
